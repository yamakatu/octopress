<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yamakatu as a Service]]></title>
  <link href="http://yamakatu.github.io/atom.xml" rel="self"/>
  <link href="http://yamakatu.github.io/"/>
  <updated>2014-07-06T17:45:06+09:00</updated>
  <id>http://yamakatu.github.io/</id>
  <author>
    <name><![CDATA[yamakatu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWSでGPUインスタンス起動まで]]></title>
    <link href="http://yamakatu.github.io/blog/2014/07/05/gpgpu/"/>
    <updated>2014-07-05T18:20:02+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/07/05/gpgpu</id>
    <content type="html"><![CDATA[<br/>


<p>Twitterで @berobero さん、 @teramonagi さんあたりと、AWSでGPGPUなMCMCについて話をしていた。</p>

<p>そして気がついたら第3回肉ソンが開催されたので、EC2慣れてない人向けに、GPUがつかえるインスタンスの起動（クラスタ組まずに1台構成）まで持って行く方法を、肉を食いながらまとめてみた。</p>

<!-- more -->


<h2>前提</h2>

<p>・AWSのアカウントがある</p>

<p>・起動したいRegionでKeyPairを作成している。初めての方は<a href="http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair">ここら辺</a>を参考に</p>

<h2>インスタンスタイプについて</h2>

<p>AWSにはGPGPU用のインスタンスとして、g2.2xlargeとcg1.4xlargeがある。昔はもう一つあった気がするがどっか行った。</p>

<p>cg1.4xlargeは前世代で、今では使えるリージョンも限られててTokyo Regionで利用できないので、今回はg2.2xlargeを利用する。</p>

<p>g2.2xlargeのGPUは<font size="14">1536コア</font>。ちょっぱやである。</p>

<p>ちなみにg2.2xlargeはTokyo Regionで$0.650 / 1時間なので実際に利用はお財布と相談してください。スポットインスタンスを使うともっと安くなるけど、今回は説明するのがアレなので普通にオンデマンドインスタンスを使う。</p>

<h2>AMIについて</h2>

<p>NVIDIAが提供しているAMIを使うと既にドライバが入っていて楽チンなので、今回はこれを利用することにする。</p>

<p>NVIDIAのGPUインスタンス用AMIは現時点ではWindows ServerとAmazonLinux(CentOSベース)がある。好きな方を選ぶ。</p>

<br/>


<p>俺はubuntuがいいんじゃボケが、とかいう人は他のAMIを使う。ただし、g2.2xlargeもcg1.4xlargeも仮想化方式がHVMなので、AMIはHVM対応のものを選ぶ必要があるので注意。</p>

<h2>インスタンス起動</h2>

<p>まず、<a href="https://aws.amazon.com/marketplace/ref=srh_navhdr_header">AWS Marketplace</a>へ行く。ログインしてなかったらする。</p>

<p>検索窓に「NVIDIA GRID GPU Driver」あたりをぶっ込む。検索結果のうち、NVIDIAのアイコンなAMIがそれ。</p>

<p>ちなみにNVIDIA以外のAMIを使いたい場合は左メニューの検索条件のインスタンスタイプでg2.2xlargeを選択して絞ると探し易い。</p>

<p>このうち、使いたいOSのAMIを選択する &amp; continueをクリッククリック。</p>

<br/>


<p>起動方法は2種類ある。スポットインスタンスも使いたいとか、ストレージの設定をいじりたい人は「Manual Launch」で起動する。とりあえず起動したいなら、「1-Click Launch」から起動する。</p>

<p>今回は説明がアレなので「1-Click Launch」前提で話を進める。</p>

<br/>


<p>「Region」でインスタンスを起動させたいRegionを選択。EC2はリージョン毎に料金が異なる。Oregonあたりが安いけど、RTT高くなって操作がアレになる。Tokyoは逆。</p>

<p>VPC Settingの説明もアレなので、とりあえずそのまま。</p>

<p>Security Groupはとりあえずログインして使うだけならこのままで大丈夫。後でも変えれる。</p>

<p>Key Pairは作っておいたものを指定する。</p>

<p>右側にあるAccept Termsなんちゃらをクリックして起動。</p>

<h2>インスタンスログイン</h2>

<p>「1-Click Launch」で、かつAmazon Linuxを利用する場合、インスタンス起動後の画面にAWSのManagement ConsoleのEC2ページへのリンクがあるのでこれで遷移する。もしくは<a href="https://console.aws.amazon.com/ec2/v2/home">自力で遷移</a>する。</p>

<p>Windows Serverを選んだ場合はこのリンクがないような気がするので、AWSのManagement ConsoleのEC2ページへ<a href="https://console.aws.amazon.com/ec2/v2/home">自力で遷移</a>する。</p>

<p>自力で遷移する場合、起動時に指定したリージョンと画面のリージョンを合わせることを忘れずに。</p>

<br/>


<p>インスタンスの一覧画面に遷移できたら、ここから先程起動したインスタンスを選択する。</p>

<p>インスタンスを選択すると、下に詳細情報が表示される。この中からグローバルIP(Public IPってやつ)を特定する。</p>

<p>インスタンスのInstance StateとStatus Checksが大丈夫になるまで待つ。Windows Serverの場合、インスタンスのlaunchにAmazon Linuxよりも時間がかかる気がする。ちなみにこのページのオートリロードは信用ならないので、手動でブラウザリロードするのがおぬぬめ。</p>

<p>ステータスがOKになったら下記手順でログイン。</p>

<br/>


<h3>Amazon Linuxの場合</h3>

<p>さきほど特定したIPに対して、起動時に指定したKeyPairを利用してSSHでログインできる。ちなみにAmazon Linuxはログインユーザにec2-userを使う。ログイン後にsudo -iでrootになれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ssh</span> -i .ssh/指定したKeyPairファイル ec2-user@上で特定したPublicIP
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>Windows Serverの場合</h3>

<p>リモートデスクトップでAdministratorユーザで接続する。</p>

<p>ここで利用するパスワードは、Management ConsoleのEC2ページで該当インスタンスを右クリック、「Get Windows Password」を選択して、インスタンス起動時に指定したKey Pairをぶっこむ。そうするとパスワードが表示されるはず。</p>

<br/>


<p>以上でログイン完了。</p>

<h1>最後に必ず確認すること</h1>

<p>EC2は時間課金なので、<font size="12">インスタンスの停止を忘れると破産します。</font></p>

<p>特にGPU系のインスタンスは比較的高価なので、終わったらインスタンスは忘れずに停止させる。</p>

<p>あとめんどくさかったので書かなかったけど、ストレージ(EBS)料金、ストレージ(EBS)へのI/O、アウトバウンドなトラフィック、固定IPでもインスタンス料金ほどではないけど課金されるので注意する。</p>

<p>なのでインスタンスをTerminate(削除)せずに、stop(停止)するだけだと、ストレージ(EBS)の料金がかかってしまうので注意。</p>

<p>また、インスタンスを削除しても、オプションでストレージ(EBS)を残す指定をしていたり(デフォルトではインスタンス削除時に自動で削除されるので今回の手順であれば大丈夫なはず)、</p>

<p>固定IPをリリースせずにいたりすると（デフォルトでは固定IPじゃないので今回の手順だと大丈夫なはず）、</p>

<p>ストレージ料金や固定IP費はかかり続けるのでこれも注意が必要。</p>

<h3>個人的意見</h3>

<p>開発->テスト->修正->テストというルーチンをまわす作業は時間を食いがちなので、企業ならともかく個人利用の場合、時間課金であるEC2は開発環境とかにはあまり向かないと思います。</p>

<p>個人的には手元にGPGPUが使える手頃なマシンを用意して、そこで開発。そして、いざ計算！という段階でEC2の高性能なGPUを振り回す、というアプローチが個人的にはいい気がします。</p>

<p>気が向いたら、MCMCとかDeepLearning動かす話をいつか書きます。</p>

<p><font size="14">Have a nice GPGPU !!!</font></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第4回「データ解析のための統計モデリング入門」読書会を開催しました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/06/27/midoribon04/"/>
    <updated>2014-06-27T23:50:14+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/06/27/midoribon04</id>
    <content type="html"><![CDATA[<br/>


<p>今回も前々回、前回に引き続きドワンゴ様に会場を提供して頂きました。</p>

<p>また、今回から仕事等で参加できない方や、遠方の方でも閲覧できるように、ニコニコ生放送による中継を行いましたが、こちらに関しても放送枠の用意、機材の手配、配信の担当まで、なにもかもやってくださいました。感謝すぐる！</p>

<!-- more -->


<p><img src="http://yamakatu.github.io/images/kansya2.jpg"  ></p>

<br/>


<h3>■4章「GLMのモデル選択」 by @mtknnktm</h3>

<iframe src="http://yamakatu.github.io//www.slideshare.net/slideshow/embed_code/36246351" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/MasanoriTakano1/4-36246351" title="みどりぼん読書会 第4章" target="_blank">みどりぼん読書会 第4章</a> </strong> from <strong><a href="http://www.slideshare.net/MasanoriTakano1" target="_blank">m tkn</a></strong> </div></p>

<br/>


<p>本来はもう一人の方と、4章を半分ずつ担当して頂く予定でしたが、もう一人の方が仕事で参加できないということになってしまい…どうする！？と焦りましたが、快くお一人ですべて対応して頂きました…</p>

<p><img src="http://yamakatu.github.io/images/sasugadio.jpg"  ></p>

<br/>


<p>発表の方は、自分は懇親会のピザの注文で手一杯であまり聞けませんでした（白目</p>

<br/>


<h3>■懇親会</h3>

<p>ここ最近の懸念であった、「イマイチ質疑が盛り上がらない」という点を解消すべく、今回は懇親会を開催。</p>

<p>個人的にはまあまあ盛り上がれたかな、と思ってます。</p>

<p>30人近く参加して頂けましたが、そのうち3〜4割ぐらいの方はこれまでの懇親会に参加されてなかった方で、かつ一度もお話したこともない方だったので、そういう方とお話できたのは個人的に特に良かったです。</p>

<p>周囲からもなかなか好評でしたので、次回もやります。</p>

<p>まあ個人的には、勉強会は懇親会がメインだと思っています（おい</p>

<p>しかし、最後に濱田さんに写真を撮ってもらうのを忘れたのが残念だ！</p>

<br/>


<h3>■次回</h3>

<p>次回は7/8に同じくドワンゴ様に会場を提供して頂く予定です。ただ、諸事情により20時開始です。</p>

<p>次回もニコニコ生放送による中継を行います。</p>

<p>懇親会もやります。</p>

<p>募集はそのうちかけまする〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第3回「データ解析のための統計モデリング入門」読書会を開催しました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/06/13/midoribon03/"/>
    <updated>2014-06-13T02:53:23+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/06/13/midoribon03</id>
    <content type="html"><![CDATA[<br/>


<p>第3回「データ解析のための統計モデリング入門」読書会を開催しました。</p>

<p>今回も前回に引き続きドワンゴ様に会場を提供して頂きました。感謝！</p>

<!-- more -->


<p><img src="http://yamakatu.github.io/images/arigatou-golgo.jpeg"  ></p>

<br/>


<p>今回は3章で、これまでよりも少し踏み込んだ内容ということもあり、前回よりもさらに質疑で盛り上がったかなと思います。</p>

<p>#個人的には本を忘れてしまって、質疑に入り辛かったのが残念…</p>

<p>ですが、まだまだですね…もうちょっと仕掛けを考えないといけません。</p>

<p>ということで次回は勉強会終了後に、そのまま会場で懇親会を行います。</p>

<p>これでもう少し議論が盛んになることを期待。</p>

<br/>


<p>次回は他にも、UStreamもしくはニコニコ生放送での中継を予定しています。</p>

<p>これで遠方の方も見れるね１１！</p>

<p>わざわざ会場に足を運ばなくても見れるね１１！</p>

<br/>


<h3>■オープニングトーク by @yamakatu</h3>

<p>次回は勉強会後に懇親会を予定。</p>

<p>勉強会後に会場でピザ＆アルコール。</p>

<ul>
<li>社会人：2000円</li>
<li>学生：500円</li>
</ul>


<br/>


<h3>■3章前半 by @siero5335</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35689851" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/eguchiakifumi/3-35689851" title="みどりぼん3章前半" target="_blank">みどりぼん3章前半</a> </strong> from <strong><a href="http://www.slideshare.net/eguchiakifumi" target="_blank">Akifumi Eguchi</a></strong> </div></p>

<br/>


<h3>■3章後半 by @aki_n1wa</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35720854" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/shinyaakiba/3-35720854" title="データ解析のための統計モデリング入門3章後半" target="_blank">データ解析のための統計モデリング入門3章後半</a> </strong> from <strong><a href="http://www.slideshare.net/shinyaakiba" target="_blank">Shinya Akiba</a></strong> </div></p>

<br/>


<h3>■LT 猫に教えてもらうルベーグ可測 by @shuyo</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35785798" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/shuyo/ss-35785798" title="猫に教えてもらうルベーグ可測" target="_blank">猫に教えてもらうルベーグ可測</a> </strong> from <strong><a href="http://www.slideshare.net/shuyo" target="_blank">Shuyo Nakatani</a></strong> </div></p>

<br/>


<h3>■おまけ</h3>

<p>勉強会後の懇親会では、この日がみんな大好き @tetsuroito さんの誕生日ということで、皆で誕生日を祝いました。</p>

<p>写真は和民のチーズケーキで祝われるテツローさん</p>

<p><img src="http://yamakatu.github.io/images/tetsuro.jpeg"  ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Casual Talks #1 でLTしてきました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/06/07/mlct01/"/>
    <updated>2014-06-07T18:51:52+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/06/07/mlct01</id>
    <content type="html"><![CDATA[<p>Machine Learning Casual Talks #1 でLTしてきました。</p>

<br/>


<!-- more -->


<p>・<a href="http://connpass.com/event/6275/">Machine Learning Casual Talks</a></p>

<p>・<a href="http://togetter.com/li/676930">まとめ</a></p>

<br/>


<p>これまでの経験上、Casualと名のついた勉強会がCasualであった試しは一度もないのですが、今回もCasualという名のガチ勉強会でした。</p>

<p>自分は遅刻＆資料をせこせこ作っていてたので、他のかたの発表はあまり聞けませんでしたが（白目</p>

<p>発表者はいずれもガチ勢だったので結構盛り上がったような気がします。</p>

<p>特にJubatusの開発に関する話を聞く機会は、なかなかないんじゃないかなーと思うので、そこら辺は熱かったです。</p>

<p>噂によると第二回もあるようなので楽しみですねー</p>

<br/>


<p>自分の発表スライドはこちら</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35566045" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yamakatu/mlct01-lt" title="MLCT #1 LT PythonでカジュアルにDeepLearning！" target="_blank">MLCT #1 LT PythonでカジュアルにDeepLearning！</a> </strong> from <strong><a href="http://www.slideshare.net/yamakatu" target="_blank">Katsushi Yamashita</a></strong> </div></p>

<br/>


<p>日本ではH2Oの情報はあまり見当たらないのでちょっと紹介してみました。</p>

<p>アルゴリズムを自前で実装するのは、アルゴリズムの理解にはとても有意義ですが、開発工数やメンテナンスを考えると、実務ではやはりありものを使いたいところです。</p>

<p>そして今はやりのDeepLearningが使えるぜー、ということで紹介。詳しくはスライドを見てください。（といってもそんな大したことかいてないですが</p>

<p>DeepLearningの処理系として見ると、GPU使えないのがイマイチなところですが、将来的に対応予定のようなので要注目です。</p>

<p>Spark + MLlibもいいけどH2Oもみんな使ってみようZE！</p>

<br/>


<p>余談ですが、勉強会前、最中、そして終わった後、多くの方に「ごちそうさまです」と言われたのが本当に不思議でしたまる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第2回「データ解析のための統計モデリング入門」読書会を開催しました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/05/28/midoribon02/"/>
    <updated>2014-05-28T10:08:12+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/05/28/midoribon02</id>
    <content type="html"><![CDATA[<!-- more -->


<br/>


<p><a href="http://connpass.com/event/6392/">第2回「データ解析のための統計モデリング入門」読書会</a>を開催しました。</p>

<p>今回はドワンゴ様に会場を提供して頂きました。</p>

<p><img src="http://yamakatu.github.io/images/arigatou2.jpg"  ></p>

<br/>


<h3>オープニングトーク by @yamakatu</h3>

<p>1回目と同じく静寂の中で始まったアウェー感満載のオープニングトーク。毎回心が鍛えられます。</p>

<p>以下、話したこと要約</p>

<p>・9/16に久保先生に参加していただくよ</p>

<p>・前半発表者決まったよ</p>

<p>・開催曜日は考えたけど、やっぱこのまま火曜開催でやります</p>

<p>開催曜日については、とりあえず発表者の皆さんのご都合を聞いてみましたが、全員合わせてみたら月曜から金曜まで全部無理だったというドリフ的展開になったので、引き続き火曜開催となりました。</p>

<p>ちなみに次回はこの静寂の空気を打ち壊す秘策を用意しておりますまる</p>

<br/>


<h2>発表内容</h2>

<h3>第2章「確率分布と統計モデルの最尤推定」 by @kos59125</h3>

<iframe src='https://onedrive.live.com/embed?cid=FD448A567D4BC37E&resid=FD448A567D4BC37E%214702&authkey=&em=2&wdAr=1.7777777777777777' width='700px' height='440px' frameborder='0'>これは、<a target='_blank' href='http://office.com/webapps'>Office Online</a> の機能を利用した、<a target='_blank' href='http://office.com'>Microsoft Office</a> の埋め込み型のプレゼンテーションです。</iframe>


<br/>


<br/>


<p>最近ごみ箱アイコンをリニューアルしたごみ箱さんによる2章の発表。</p>

<p>脱線として発表してくださったポアソン分布まわりの証明が個人的には特にナイスで、さすがはごみ箱さん！という感じでした。</p>

<p>今回の証明のように、自分で一度手を動かして計算してみるのは、理解を深めるために大事ですよね。</p>

<p>質疑もなかなか盛り上がって良い感じでした。みんなもっと発言して双方向で深い議論をしたいですね。</p>

<br/>


<p>あとどうでもいいですが、OneDriveにこんなスライド埋め込み機能あったんですね。さすがF#勢のごみ箱さんです。。</p>

<p>#けどスライド表示の操作感がイマイチ。。</p>

<br/>


<h3>LT アジャイルデータサイエンス 第2章「データ」 by @who_you_me</h3>

<p><a href="http://slide.who-you-me.com/greenbook/chap02.html#/"><a href="http://slide.who-you-me.com/greenbook/chap02.html#/">http://slide.who-you-me.com/greenbook/chap02.html#/</a></a></p>

<p>前回の1章に引き続き、2章。</p>

<p>半構造や非構造データはSQLよりも、スキーマに柔軟性を持たせられるNoSQLがいいよね的な。</p>

<br/>


<h3>LT AwkでEffective前処理 by @aki_n1wa</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35162771" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/shinyaakiba/awkeffective-35162771" title="Awkでeffective前処理" target="_blank">Awkでeffective前処理</a> </strong> from <strong><a href="http://www.slideshare.net/shinyaakiba" target="_blank">Shinya Akiba</a></strong> </div></p>

<br/>


<p>分析力をコアとする某企業でバイトしてらっしゃるという秋庭さん。</p>

<p>実際の分析業務では前処理は超重要、、、ですが超面倒でもあるので、ここを効率化できると幸せですよね。</p>

<br/>


<h2>飛び込みLT</h2>

<p>ごみ箱さんの2章の発表は1時間とっていたのですが、30分で終わるというトラブルもあって飛び込みLTを募集させて頂きました。</p>

<p>以下2件発表して頂けましたー</p>

<h3>飛び込みLTその1 IT系エンジニアのための統計学 by @piroyoung</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/34535247" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/piroyoung/it-34535247" title="IT系エンジニアのための統計学入門 ver1" target="_blank">IT系エンジニアのための統計学入門 ver1</a> </strong> from <strong><a href="http://www.slideshare.net/piroyoung" target="_blank">Hiroki Mizukami</a></strong> </div></p>

<br/>


<p>内容的には、確率変数、期待値、ベルヌーイ分布、二項分布、一様分布あたりから、今回出てきた最尤推定まで統計の基本をお話して頂けました。</p>

<p>ごみ箱さんの発表の後だったので、内容的に前後してる感じもちょっとしましたが、良い確認になりましたね。</p>

<p>やはり統計の基本を抑えるには赤本ですよねー</p>

<br/>


<h3>飛び込みLTその2 最尤推定をPHPで書いてみた by @y__uti</h3>

<br/>


<p>2章で取り上げられている最尤推定をPHPで書いてみましたー、というお話。</p>

<p>先ほどの「一度自分で計算してみる」と似た話ですが、アルゴリズムも一度自分で実装すると理解が深まるのでいいですよね。</p>

<br/>


<h3>まとめ</h3>

<p>1回目と同じく静寂の中ではじまったので少し不安でしたが、実際にやってみると質疑もなかなか盛り上がって良かったかなと思っています。</p>

<p>2章の内容はまだ初歩的ですが、今後難易度が上がってきた時には十分な理解を得るためにも、もっと皆で議論したいですね。</p>

<p>そのための仕掛けも主催者の仕事だと思って頑張ります。。。</p>

<br/>


<h3>次回</h3>

<p><a href="http://connpass.com/event/6652/">次回の募集</a>、早速開始しています。既に募集枠埋まりそうですが。。。</p>

<p>場所は同じくドワンゴさんです。ありがたやー</p>

<p>そろそろ難易度も徐々に上がってきますが、がんばっていきましょー</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第1回「データ解析のための統計モデリング入門」読書会を開催しました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/05/14/midoribon01/"/>
    <updated>2014-05-14T23:07:26+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/05/14/midoribon01</id>
    <content type="html"><![CDATA[<!-- more -->


<br/>


<p><a href="http://connpass.com/event/5972/">第1回「データ解析のための統計モデリング入門」読書会</a>を開催しました。</p>

<p>今回は<a href="http://www.iij.ad.jp/company/development/external/study/">IIJ様</a>に会場を提供して頂きました。</p>

<p><img src="http://yamakatu.github.io/images/kansya.jpg"  ></p>

<br/>


<p>この勉強会は「はじめてのパターン認識読書会（略してはじパタ）」の流れを引き継ぐ形ではじまりました。</p>

<p>当初は、</p>

<p>はじパタメンバ + α = 30人程度？</p>

<p>という認識でしたが、募集を開始してみたところ、あれよあれよという間に100人を超える方に参加申し込みを頂けました。</p>

<p>当日は雨も降ったりで80名程度の参加者となりましたが、ここまで人が集まったのは、やはり選んだ本が良かったのかなと思います。
#正確な人数は数え忘れました&hellip;</p>

<p>参加してくださった皆さん、お疲れさまでした。</p>

<br/>


<p>そして初回開催後、2章から6章までの発表者を調整さんで募集し、11名の方から立候補頂きました。</p>

<p>その後調整して9名の方にお願いすることに。</p>

<p>立候補者がイマイチ集まらなかったのは、前半部分はみんなには簡単過ぎて、やる気がしないからなのでしょうか。。。</p>

<h2>発表内容</h2>

<h3>オープニング by @yamakatu</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/34639901" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yamakatu/midoribon-opening" title="第1回「データ解析のための統計モデリング入門」読書会 オープニング" target="_blank">第1回「データ解析のための統計モデリング入門」読書会 オープニング</a> </strong> from <strong><a href="http://www.slideshare.net/yamakatu" target="_blank">Katsushi Yamashita</a></strong> </div></p>

<p>べしゃりました。特に書くようなことはないです。強いて言うなら、すべりました。</p>

<p>ちなみにタイトルは「冷やし中華はじめました」を意識しました。</p>

<h3>1章 by @yamakatu</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/34640742" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yamakatu/1-34640742" title="みどりぼん 1章「データを理解するために統計モデルを作る」" target="_blank">みどりぼん 1章「データを理解するために統計モデルを作る」</a> </strong> from <strong><a href="http://www.slideshare.net/yamakatu" target="_blank">Katsushi Yamashita</a></strong> </div></p>

<br/>


<p>しゃべりました。</p>

<p>発表後に指摘をくださった方がいたのですが（お名前聞くの忘れた）、1.2章はもう少し突っ込んでも良かったかもしれません。</p>

<p>この場にいる人は統計モデルの重要性を十分わかっているから来ている、と思ってあんま触れませんでした。</p>

<p>確かに大事なことだから、もっと触れてもよかったかな。</p>

<h3>LTその1 「アジャイルデータサイエンス」1章 by @who_you_me</h3>

<p><a href="http://slide.who-you-me.com/chap01.html#/"><a href="http://slide.who-you-me.com/chap01.html#/">http://slide.who-you-me.com/chap01.html#/</a></a></p>

<p>最近話題の本、「アジャイルデータサイエンス」の1章。</p>

<p>今回は1章で、今後も継続してLTしてくださるとのこと。</p>

<br/>


<p>「(開発)メンバーはクリエイティブワーカーであり、オフィスワーカーではない」</p>

<p>ほんとその通りだと思う。</p>

<br/>


<p>一冊でたくさんのミドルウェアやサービスを取り上げてるので、それぞれについては内容薄そうだなーって思ってたけど、本が想像以上に薄かったので尚更薄そうな。。。</p>

<h3>LTその2 がうす・まるこふの定理 とかそのへん by @tanimocchi</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/34533316" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/mocchi_/lt-gauss-markovtheorem" title="がうす・まるこふ の定理とかそのへん" target="_blank">がうす・まるこふ の定理とかそのへん</a> </strong> from <strong><a href="http://www.slideshare.net/mocchi_" target="_blank">Tadaaki Tanimoto</a></strong> </div></p>

<br/>


<p>久保本は一般化線形モデルからはじまって線形モデルの話はないから、そこらへん抑えましょう、ということでLTしてくださいました。</p>

<p>相変わらずさすがの数学力。。。</p>

<h3>飛び込みLT</h3>

<p>時間が余ったので飛び込みLTを募集したところ、1名の方が飛び込みでLTしてくださいました。</p>

<p>すいません、内容はメモし忘れました。。。</p>

<h2>次回</h2>

<p>5/27 ドワンゴ様に会場をお借りして開催</p>

<p><a href="http://connpass.com/event/6392/">第2回「データ解析のための統計モデリング入門」読書会</a></p>

<h2>以下、個人的まとめ</h2>

<h3>決定事項</h3>

<ul>
<li>毎週開催か隔週開催か？ ➡ 参加者の皆さんで多数決を行い、隔週開催に決定。</li>
</ul>


<h3>反省点</h3>

<ul>
<li>何曜開催にするか、皆さんの意見を聞いて決定するのを忘れた</li>
<li>正確な参加人数をカウントし忘れた</li>
<li>1章はボリュームも少なく、時間も余ってしまったので、最初に自分が2章までやった方が良かった</li>
<li>懇親会でご一緒した方全員ご挨拶できなかった(懇親会に来なかった方でもご挨拶したい方いたけどできず</li>
<li>すべった</li>
</ul>


<p>大杉。。</p>

<h3>次回メモ</h3>

<ul>
<li>何曜開催にするか、次回オープニングで参加者のみなさんの意見を聞きつつ決定する</li>
<li>オープニングですべらない</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ElasticsearchでCSVからインデクシングする]]></title>
    <link href="http://yamakatu.github.io/blog/2014/04/30/escsvriver/"/>
    <updated>2014-04-30T16:28:37+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/04/30/escsvriver</id>
    <content type="html"><![CDATA[<!-- more -->


<br/>


<p>インデクシングしたいデータがCSVだった場合、CSVからjsonへの変換は意外と面倒だったりしませんか。</p>

<p>そんな場合、CSV River Pluginを使ってCSVから直接インデクシングがオススメです。</p>

<p><a href="https://github.com/AgileWorksOrg/elasticsearch-river-csv">CSV River Plugin</a></p>

<h3>インストール</h3>

<p>(ver 2.0.1の場合。ESとのバージョン対応は上記Githubで要確認)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bin/plugin -install river-csv -url https://github.com/AgileWorksOrg/elasticsearch-river-csv/releases/download/2.0.1/elasticsearch-river-csv-2.0.1.zip
</span></code></pre></td></tr></table></div></figure>


<h3>登録</h3>

<p>こんな感じ。他のオプションは上記ページで要確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPUT localhost:9200/river/my_csv_river/meta -d ’ <span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span> : <span class="s2">&quot;csv&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;csv_file&quot;</span> : <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;first_line_is_header&quot;</span>:<span class="s2">&quot;true&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;folder&quot;</span> : <span class="s2">&quot;/tmp&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;filename_pattern&quot;</span> : <span class="s2">&quot;.*\\.csv$&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;index&quot;</span> : <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;index&quot;</span> : <span class="s2">&quot;index_name&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> : <span class="s2">&quot;type+name&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;bulk_size&quot;</span> : 1000,
</span><span class='line'>    <span class="s2">&quot;bulk_threshold&quot;</span> : 10
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>’
</span></code></pre></td></tr></table></div></figure>


<h3>罠</h3>

<p>しかし罠がありました。</p>

<br/>


<p>GithubのREADME.mdには一言も書いてませんが、処理されたCSVファイルは以下の命名規則でRenameされます。</p>

<br/>


<p>（hoge.csvの場合）</p>

<ul>
<li>読み込み中：hoge.csv.processing</li>
<li>読み込み済：hoge.csv.processing.imported</li>
</ul>


<br/>


<p>登録のjsonを見れば雰囲気でわかりますが、folder以下のfilename_patternで指定したファイルが対象になります。</p>

<p>そのため、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>“filename_pattern” : “.*”
</span></code></pre></td></tr></table></div></figure>


<p>みたいな正規表現で設定すると、読み込み済みのCSVファイルが、次回polling時に読み込み対象になります。</p>

<p>pollingはデフォルト60minなので（変更可）、1時間ごとにすべてのファイルが再インデクシングされます。</p>

<p>デフォルト値が上記正規表現なので、通常であればこのままにしとくのが吉です。</p>

<br/>


<p>変更する場合、登録する正規表現は</p>

<p>.csv$</p>

<p>で終わるようにしましょう。</p>

<br/>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elasticsearch-hadoopをもうちょい調べて遅い理由が少しわかった]]></title>
    <link href="http://yamakatu.github.io/blog/2014/04/25/eshadoop/"/>
    <updated>2014-04-25T17:20:45+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/04/25/eshadoop</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>■これまでの話</h2>

<p>第4回Elasticsearch勉強会でElasticsearch-hadoopについて発表させて頂きましたが、その際、評価としてHiveの実行速度をHDFSをストレージとして利用した場合と比較してお見せしました。</p>

<br/>


<p>ここらへんです。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/33755795?startSlide=18" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yamakatu/elasticsearchhadoop" title="elasticsearch-hadoopをつかってごにょごにょしてみる" target="_blank">elasticsearch-hadoopをつかってごにょごにょしてみる</a> </strong> from <strong><a href="http://www.slideshare.net/yamakatu" target="_blank">Katsushi Yamashita</a></strong> </div></p>

<br/>


<p>で、ちょっといくらなんでも遅すぎるな、と思って調べていたらわかったことがあったのでメモ。</p>

<h2>■わかったこと</h2>

<p>結論から言うと、elasticsearch-hadoopはRead時はPrimary Shardの数しかMapタスクを生成しない。</p>

<br/>


<p><img src="http://yamakatu.github.io/images/majide.jpg"  ></p>

<br/>


<p>これはelasticsearch-hadoopのここら辺のソースを読んでもわかります。</p>

<p>・EsInputFormat.java getSplitsメソッド</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">ShardInputSplit</span><span class="o">[]</span> <span class="n">splits</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShardInputSplit</span><span class="o">[</span><span class="n">targetShards</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">Shard</span><span class="o">,</span> <span class="n">Node</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">targetShards</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Shard</span> <span class="n">shard</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">splits</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">ShardInputSplit</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">getIpAddress</span><span class="o">(),</span> <span class="n">node</span><span class="o">.</span><span class="na">getHttpPort</span><span class="o">(),</span> <span class="n">node</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">node</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">shard</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">savedMapping</span><span class="o">,</span> <span class="n">savedSettings</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Created [%d] shard-splits&quot;</span><span class="o">,</span> <span class="n">splits</span><span class="o">.</span><span class="na">length</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">splits</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hadoopは利用するInputFormatのgetSplitsメソッドの返り値の長さで、Mapタスク数を決定します。</p>

<p>このソースを見るとわかるように、Shardのsizeで配列を生成してますね。。</p>

<p>#Hive利用時に実際に利用するInputFormatはEsHiveInputFormatなのですが、EsHiveInputFormatのgetSplitsが内部で上記を呼び出しています。</p>

<br/>


<p>しかし、そもそもちゃんと公式ホームページ見てみると、<a href="http://www.elasticsearch.org/overview/hadoop/">elasticsearch-hadoopのトップページ</a>に書いてありましたw</p>

<h2>■じゃあ、どうすればいいのか</h2>

<p>とりあえずは、インデックス生成の際にShardの数を多くすれば解決します。</p>

<p>しかし、ElasticsearchはShardの数をインデックス生成後は変更できない（はず）なので、微妙な感が否めませんが。。。</p>

<p>もっといい方法はないだろうか。。。</p>

<p>次回のElasticearch勉強会でMapRの<a href="https://twitter.com/nagix">@nagix</a>さんから聞けたりするといいな。</p>

<h2>■追試</h2>

<p>前回の評価では、シャード数が6なので、6つのMapタスクしか生成されてないことになります。
実際、ログを確認したところ、生成されたMapタスク数は6でした。</p>

<p>一方、HDFSを利用した場合はMapタスクは12個生成されていました。</p>

<br/>


<p>TaskTrackerは3台ともmapred.tasktracker.map.tasks.maximumを4に設定しているので、最大で12Mapを並列実行可能です。</p>

<p>また、サーバは4コアマシンですので、CPU的にも3台合わせて12Mapを並列実行できる計算になります。</p>

<p>#実際にはElasticseachとかのプロセスがCPUリソースを消費しますが</p>

<br/>


<p>よって、HDFS利用時は12コアを使用し、elasticsearch-hadoop利用時は6コアしか使用されていないことになります。</p>

<p>Oh,,,ということで再度評価を行いました。</p>

<p>TaskTrackerとElasticsearchが同居したサーバを3台用意し(上記スライドの3番目の評価環境と同じ）、シャード数を12、レプリカ数を2でインデックスを生成して実行しました。</p>

<br/>


<p>結果は520ms ➡ 280ms前後にまで短縮できました。</p>

<p>HDFS利用時の速度とはまだまだ差はありますが、少しはマシになりました。。</p>

<br/>


<p>#そもそも1分でも十分遅いので、1分も5分もそんなに大して変わらないとかなんとか</p>

<h2>■お詫びと訂正</h2>

<p>スライドの10ページ目で「ドキュメント1件で1Mapタスク」とありますが、正しくはMapReduceでreadする場合もHive同様、生成されるMapタスクの数はPrimary Shardの数でした。</p>

<p>お詫びして訂正します。</p>

<p>#一番最初にドキュメント数を極小で試したのですが、その時のドキュメント数とシャード数が同じだったようです。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第4回Elasticsearch勉強会で発表してきました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/04/24/es04/"/>
    <updated>2014-04-24T02:00:10+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/04/24/es04</id>
    <content type="html"><![CDATA[<!-- more -->


<br/>


<p><a href="http://elasticsearch.doorkeeper.jp/events/8865">第4回Elasticsearch勉強会</a>で発表してきました。</p>

<br/>


<p>Kibanaなんかと比較し、これまであまり注目されることのなかったelasticsearch-hadoopが不憫すぎたので、elasticsearch-hadoopについて話してきました。</p>

<br/>


<p>当日の夕方ぐらいから下痢が始まって、自分の前の <a href="https://twitter.com/johtani">@johtani</a> さんの発表中にもトイレに駆け込んだんですが、なんとか発表中は中身を出さずにすみました。</p>

<p>100人を超える参加者だったので、緊張するかなーとおもっていましたが、下痢でそれどこではなかったので、力が抜けていいかんじに発表できました。</p>

<p>ちなみにこれを下痢駆動発表と呼ぶらしいです。</p>

<blockquote class="twitter-tweet" lang="ja"><p>下痢かつさんの下痢駆動発表</p>&mdash; ノートハエ・ノーライフ (@tohae) <a href="https://twitter.com/tohae/statuses/458516157683601408">2014, 4月 22</a></blockquote>


<script async src="http://yamakatu.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<br/>


<p>みなさんも一度、試してみてはいかがでしょうか。</p>

<br/>


<p>・<a href="http://dev.classmethod.jp/server-side/4th-elasticsearchjp/">クラスメソッドさんまとめ</a></p>

<p>・<a href="http://blog.johtani.info/blog/2014/04/21/hold-on-4th-elasticsearch-jp/">大谷さんまとめ</a></p>

<br/>




<iframe src="http://www.slideshare.net/slideshow/embed_code/33755795" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yamakatu/elasticsearchhadoop" title="elasticsearch-hadoopをつかってごにょごにょしてみる" target="_blank">elasticsearch-hadoopをつかってごにょごにょしてみる</a> </strong> from <strong><a href="http://www.slideshare.net/yamakatu" target="_blank">Katsushi Yamashita</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Casual Talks#2でLTしてきました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/04/19/awscasual2/"/>
    <updated>2014-04-19T20:52:52+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/04/19/awscasual2</id>
    <content type="html"><![CDATA[<!-- more -->


<br/>


<p><a href="http://www.zusaar.com/event/3817003">AWS Casual Talks#2</a>でSpark (+MLlib) についてLTしてきました。</p>

<br/>


<p>今回はエンジニアクラスタだったので、HadoopとSparkのアーキテクチャの違いについて、前回のはじパタでのLTよりもう少し深く言及してみました。</p>

<p>Spark + MLlibについては機械学習クラスタだと実装に寄り過ぎで、エンジニアクラスタだと機械学習がピンとこないので、どこに行ってもあまり食いつかれないのが悲しい。</p>

<br/>


<p>反省点は持ち時間5分のところをCasualに15分も使ってしまったこと。。。ごめんなさい。</p>

<p>発表も下手だったのでさらに反省。</p>

<p>資料を発表直前まで作成していたので、他の方の発表を聞く余裕がなかったのも残念。</p>

<p>次に活かしたい。</p>

<br/>


<p>・<a href="http://togetter.com/li/656484">togetter</a></p>

<p>・<a href="http://dev.classmethod.jp/cloud/aws/aws-casual-talks-number-2/">クラスメソッドさんブログ</a></p>

<br/>


<p>スライド</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/33681347?rel=0" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yamakatu/aws-casual-talks2lt" title="Spot Instance + Spark + MLlibで実現する簡単低コスト機械学習" target="_blank">Spot Instance + Spark + MLlibで実現する簡単低コスト機械学習</a> </strong> from <strong><a href="http://www.slideshare.net/yamakatu" target="_blank">Katsushi Yamashita</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第14回はじめてのパターン認識読書会でLTしてきました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/03/19/hajipata14lt/"/>
    <updated>2014-03-19T09:54:15+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/03/19/hajipata14lt</id>
    <content type="html"><![CDATA[<!-- more -->


<br/>


<p>はじパタ第14回でLTしてきました。</p>

<br/>


<p>Spark + MLlib 使うと、普通にHadoop使うより機械学習速くできるよ、って話。</p>

<br/>


<p>多少滑ったけど、花粉症による頭痛のせいだと信じている。</p>

<br/>


<p>はじパタなみなさん、おつかれさまでした。</p>

<br/>




<iframe src="http://www.slideshare.net/slideshow/embed_code/32442430" width="512" height="421" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第13回はじめてのパターン認識読書会で発表してきました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/03/05/hajipata10/"/>
    <updated>2014-03-05T00:43:09+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/03/05/hajipata10</id>
    <content type="html"><![CDATA[<!-- more -->


<br/>


<p>発表しました。</p>

<p>担当は10章クラスタリングの前半部分（10.1〜10.3）</p>

<br/>


<p>内容よりスケジュール重視で担当を希望したので、それなりに理解できている章の担当になってしまった。</p>

<p>（そのスケジュールも当初の日程からずれてしまったので意味なくなったけど）</p>

<br/>


<p>勉強会は自分が発表することで学習する場、ってじっちゃんが言ってたので、どうせなら勉強不足の章をやるべきだったなー、と反省。</p>

<br/>




<iframe src="http://www.slideshare.net/slideshow/embed_code/31886423" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yamakatu/hajipata10" title="はじパタ 10章 クラスタリング 前半" target="_blank">はじパタ 10章 クラスタリング 前半</a> </strong> from <strong><a href="http://www.slideshare.net/yamakatu" target="_blank">Katsushi Yamashita</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClouderaManager の管理コンソールをとりあえず HTTPS 化する方法（EC2 を使うときは特に使おうね）]]></title>
    <link href="http://yamakatu.github.io/blog/2014/02/17/clouderamanagertls/"/>
    <updated>2014-02-17T02:06:25+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/02/17/clouderamanagertls</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>■環境</h1>

<p>ClouderaManager 4.8.1 インストール済み（他のバージョンでもそんなに対して変わらないはず）</p>

<br/>


<h1>■何があったか</h1>

<p>Hadoop Advent Calendar 2013で<a href="http://qiita.com/yamakatu/items/495246f98044398ad3d3">こんな記事</a>書いたら、<a href="http://twitter.com/shiumachi">@shiumachi</a>さんに</p>

<h3>そのやり方だとブラウザと管理コンソール間が暗号化されてないから、AWSの鍵をアップロードする際に盗聴されちゃうじゃん。m9ぷぎゃー（かなり意訳</h3>

<br/>


<p>と、ご指摘を頂きました。</p>

<p>薄々気づいてたんだけど面倒かったので手を抜いた。今では反省している。</p>

<br/>


<h1>■もうちょっとkwsk</h1>

<p>EC2でClouderaManagerを使うと、指定したインスタンスタイプと台数でHadoopクラスタを自動で作成してくれます。すげー便利。</p>

<p>この時ClouderaManagerはAWSのAPIを当然たたくんだけど、この際にはAWSの鍵が必要になります。</p>

<p>そして、この鍵はブラウザでClouderaManagerの管理コンソールからPostしてあげる必要があります。</p>

<p>この時、ClouderaManagerの管理コンソールはデフォだとhttpsに対応しておらず、httpでアクセスすることになるので、ブラウザとClouderaManagerが稼働するサーバ間の経路は暗号化されません。</p>

<p>よって、AWSの鍵が盗聴されちゃうだろ。m9ぷぎゃー。となりました。</p>

<br/>


<h1>■どうする？</h1>

<p>ClouderaManagerの管理コンソールをhttps化する方法を書いときます。</p>

<p>今回のようなEC2を使う場面でなくても有用だと思います。たぶん。</p>

<p>設定方法は本家の<a href="http://www.cloudera.com/content/cloudera-content/cloudera-docs/CM4Ent/latest/Cloudera-Manager-Administration-Guide/cmag_config_tls_security.html">ココ</a>に書いてあるんだけど、英語がアレな人もいらっしゃると思いますので、意味があると信じている。</p>

<p>本家サイトにはいくつか方法が記載されていますが、今回はとりあえずhttps化ということで、一番手軽な方法(<a href="http://www.cloudera.com/content/cloudera-content/cloudera-docs/CM4Ent/latest/Cloudera-Manager-Administration-Guide/cmag_config_tls_encr.html?scroll=topic_2__title_4_unique_8">コレ</a>)にしてます。</p>

<br/>


<h1>■手順</h1>

<h3>手順1 鍵作成&amp;配置</h3>

<p>まず鍵を作成します。（※注 この鍵はHTTPSで利用する鍵で、AWSの鍵ではありません）</p>

<p>この鍵の作成にはJavaのkeytoolを使います。</p>

<br/>


<p>そのため、鍵を作成するマシンにはJavaがインストールされている必要がありますが、ClouderaManagerがインストールされていれば、自ずとJavaがインストールされています。</p>

<p>作成した鍵はいずれにせよClouderaManaerが動作するサーバに設置する必要があるので、ClouderaManagerがインストールされたサーバで鍵を作成するのが一番手っ取り早いです。</p>

<p>よって、<b>今回はClouderaManagerが稼働するサーバ上で鍵を作成します。</b></p>

<br/>


<p>以下のコマンドで作成します。名前やら組織はめんどいので入力してませんが、適宜入力しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu@ip-10-133-198-199:~$ keytool -validity 180 -keystore cm.key -alias jetty -genkeypair -keyalg RSA
</span><span class='line'>Enter keystore password:
</span><span class='line'>Re-enter new password:
</span><span class='line'>What is your first and last name?
</span><span class='line'>  [Unknown]:
</span><span class='line'>What is the name of your organizational unit?
</span><span class='line'>  [Unknown]:
</span><span class='line'>What is the name of your organization?
</span><span class='line'>  [Unknown]:
</span><span class='line'>What is the name of your City or Locality?
</span><span class='line'>  [Unknown]:
</span><span class='line'>What is the name of your State or Province?
</span><span class='line'>  [Unknown]:
</span><span class='line'>What is the two-letter country code for this unit?
</span><span class='line'>  [Unknown]:
</span><span class='line'>Is CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct?
</span><span class='line'>  [no]:  yes
</span><span class='line'>
</span><span class='line'>Enter key password for &lt;jetty&gt;
</span><span class='line'>  (RETURN if same as keystore password):
</span><span class='line'>Re-enter new password:</span></code></pre></td></tr></table></div></figure>


<p>このままだとClouderaManagerのサーバプロセスがアクセスできないので、権限変えつつ、移動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu@ip-10-133-198-199:~$ sudo mv cm.key /etc/cloudera-scm-server/
</span><span class='line'>ubuntu@ip-10-133-198-199:~$ sudo chown cloudera-scm:cloudera-scm /etc/cloudera-scm-server/cm.key
</span><span class='line'>ubuntu@ip-10-133-198-199:~$ sudo chmod 600 /etc/cloudera-scm-server/cm.key</span></code></pre></td></tr></table></div></figure>


<p>mv先は上記ディレクトリでなくても、サーバプロセスの起動ユーザ（今回はcloudera-scm）がアクセスできれば問題ないと思います。今回は解りやすそうなところに置いてみました。</p>

<br/>


<h3>手順2 ClouderaManager設定</h3>

<p>ClouderaManagerの新規インストール時の場合を例にとります。</p>

<p>クラスタ構築済みの場合でも設定箇所は変わらないので、適宜読み飛ばしてください。</p>

<br/>


<p>まず、ブラウザからClouderaManagerにアクセスし、ログインします。（初期状態だとポートは7180、IDとパスワードはadmin/admin）</p>

<br/>


<p>ログイン後、以下のように右上のadminからパスワード変更を選択</p>

<p><img src="http://yamakatu.github.io/images/cm-1.png"  ></p>

<br/>


<br/>


<p>パスワード変更のフォームが出るが無視して、上部メニューの「管理」から「設定」を選択</p>

<p><img src="http://yamakatu.github.io/images/cm-2.png"  ></p>

<br/>


<br/>


<p>左メニューからセキュリティを選択</p>

<p><img src="http://yamakatu.github.io/images/cm-3.png"  ></p>

<br/>


<br/>


<p>以下を設定する</p>

<p>「管理コンソールで TLS 暗号化を使用する」にチェック</p>

<p>「TLS Keystore ファイルのパス」に鍵の配置先を指定。上記の例であれば/etc/cloudera-scm-server/cm.key</p>

<p>「Keystore パスワード」に作成時に指定したパスワードを入力</p>

<p><img src="http://yamakatu.github.io/images/cm-4.png"  ></p>

<br/>


<p>「変更の保存」ボタンを押す</p>

<br/>


<h3>手順3 ClouderaManager再起動</h3>

<p>以下みたいな感じでClouderaManagerを再起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu@ip-10-133-198-199:~$ sudo /etc/init.d/cloudera-scm-server restart</span></code></pre></td></tr></table></div></figure>


<p>httpsでアクセスして確認します。</p>

<h3>httpsの場合のポートは7183です。</h3>

<br/>


<p>ただ再起動後すぐにアクセスしても多分無理。ちょっと待つ。</p>

<p>アクセスできればおk。</p>

<p>しらばく待ってもアクセスできなければ、iptablesとかEC2ならセキュリティグループの設定あたりを疑うのが吉かも。</p>

<h1>■まとめ</h1>

<p>・ClouderaManagerはデフォではhttpsが利用できない</p>

<p>・この状況だと何かとまずい（EC2の場合は特に）</p>

<p>・こんな手順でさくっといけるよ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Kibana】Histgramで欠損値に0が自動補完されるのがアレだったので、OFFにする機能を実装してプルリクしてマージしてもらったお話]]></title>
    <link href="http://yamakatu.github.io/blog/2014/02/09/kibana-pull-req/"/>
    <updated>2014-02-09T15:40:59+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/02/09/kibana-pull-req</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>■前提</h1>

<p>Kibana &lt;= kibana-3.0.0 milestone4</p>

<br/>


<h1>■何が起きたか</h1>

<p>去年の12月ぐらいに、「Elasticsearch + Kibana って、ログの可視化に超便利ジャーン！」という感じでKibanaを利用していたところ、Histgramの描画でちょっと微妙な現象に遭遇。</p>

<br/>


<p>例えば、</p>

<br/>


<table border=1><tr align="center"><td width="200">Time</td><td width="100">value</td></tr><tr align="center"><td>2014/11/08T09:00:00</td><td>10</td></tr><tr align="center"><td>2014/11/08T09:30:00</td><td>30</td></tr><tr align="center"><td>2014/11/08T10:00:00</td><td>20</td></tr></table>


<br/>


<p>な感じのデータでHistgramを描画した時、自分はこう描画して欲しかった。</p>

<br/>


<p><img src="http://yamakatu.github.io/images/kibana-ok.png"  ></p>

<br/>


<p>が、描画されるのは以下のようなグラフ。</p>

<br/>


<p><img src="http://yamakatu.github.io/images/kibana-ng.png"  ></p>

<br/>


<h1>■どういうことなのか</h1>

<p>この二つのグラフはご覧の通り、Intervalの値が異なる。前者のグラフは30分、後者のグラフは10分。</p>

<p>んで、KibanaはIntervalごとに値を表示しようとする。</p>

<p>しかし、10分ごとの場合、9:10、9:20などには値が欠損している。</p>

<h3>この時Kibanaは勝手に0を補完する。</h3>

<br/>


<p>いやー気が利くねー（白目</p>

<br/>


<h1>■どう思った？</h1>

<p>確かに0を補完して描画して欲しい場合もあるだろうから、間違ってはいない。</p>

<p>しかし、今回の自分のように、余計なことすんじゃねーよ、という場合も普通にある。</p>

<p>なので、選べるようにした方がよくねー？</p>

<br/>


<p>あと前者のグラフのように、データが一定間隔でかつ欠損がなく、Intervalの値をその間隔に設定できる場合、この事象は発生しない。</p>

<p>だけど、こういう場合であろうとなかろうと、発生しないでほしい。。。</p>

<br/>


<h1>■それでどうしたのか</h1>

<p>Githubでソース読んでたら、実は既にグラフ描画の仕方が選択できるように実装されてた。<a href="https://github.com/elasticsearch/kibana/blob/master/src/app/panels/histogram/timeSeries.js#L103">ここらへん</a></p>

<p>(ちなみにこの描画方式はコード上ではstrategyと呼ばれているので、以下strategy）</p>

<p>なんだけど、今回のような「値のない時間に0を補完しない」というstrategyは当時はなかった。</p>

<br/>


<p>というわけで、実装して、issue作って、プルリク送っときました。<a href="https://github.com/elasticsearch/kibana/pull/742">#742</a></p>

<p>そしたら忘れた頃にマージしてもらえました。</p>

<p><a href="https://github.com/elasticsearch/kibana/blob/master/src/app/panels/histogram/timeSeries.js#L103">上記コード</a>にある_getNoZeroFlotPairsがソレです。</p>

<p>この実装ではIntervalがどんな値だろうが、欠損値に0を補完しなくなります。</p>

<br/>


<p>次のリリースでは乗っかると思われます。</p>

<p>ただ、以前コードを見た時は、そもそもstrategyを選択するUIがなかったので、画面からはまだ使えないかもしれん。。。</p>

<br/>


<h1>■すぐ使いたければどうすればいいのか</h1>

<p>リリースまで待てない人は上記ソースを参考にして改修すると良いと思います。</p>

<br/>


<p>もしくは、とりあえず今すぐちょっと試したい方なんかは、乱暴だけど、</p>

<p>app/panels/histogram/timeSeries.js</p>

<p>の</p>

<p>ts.ZeroFilled.prototype._getMinFlotPairs</p>

<p>を以下のように改修するのが一番手っ取り早いです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">ts</span><span class="p">.</span><span class="nx">ZeroFilled</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getMinFlotPairs</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">time</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">times</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_data</span><span class="p">[</span><span class="nx">time</span><span class="p">]){</span>
</span><span class='line'>      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span> <span class="nx">time</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_data</span><span class="p">[</span><span class="nx">time</span><span class="p">]]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>#人によっては改修後にブラウザのキャッシュクリアが必要かもしれん</p>

<p>ちなみにコードをいじる場合は、公式サイトからDLしたkibanaだと改修が大変なので、<a href="https://github.com/elasticsearch/kibana/releases">Github内のリリース</a>から落としたコードを利用すると幸せになれると思います。</p>

<br/>


<h1>■まとめ</h1>

<ul>
<li>今のKibanaのHistgramは欠損値に勝手に0を入れる</li>
<li>それをOFFにするオプションを実装して、プルリク送って、マージされた</li>
<li>自分でがんばって書き換えればすぐに使えるよ</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログつくりました]]></title>
    <link href="http://yamakatu.github.io/blog/2014/02/08/first/"/>
    <updated>2014-02-08T14:44:09+09:00</updated>
    <id>http://yamakatu.github.io/blog/2014/02/08/first</id>
    <content type="html"><![CDATA[<p>エンジニアっぽくGithub + Octopressでつくってみました。</p>

<br/>


<p>技術的なことを気ままに書いていこうと思います。</p>
]]></content>
  </entry>
  
</feed>
